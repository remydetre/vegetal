<?phprequire_once _PS_MODULE_DIR_ . 'rdorderfields/classes/CarrierOrder.php';require_once _PS_MODULE_DIR_ . 'rdorderfields/classes/PackagingOrder.php';class rdorderfields extends Module{    public function __construct()    {        $this->name = "rdorderfields";        $this->displayName = "Ajout de champs liés à la commande)";        $this->description = "";        $this->version = "1.0.0";        $this->tab = "administration";        $this->author = "Rémy Détré (detre.remy.pro@gmail.com))";        $this->bootstrap = true;        parent::__construct();    }    public function installTab($parent, $class_name, $name)    {        $tab = new Tab();        $tab->active = 1;        $tab->class_name = $class_name;        $tab->name = array();        foreach (Language::getLanguages(true) as $lang) {            $tab->name[$lang['id_lang']] = $name;        }        $tab->id_parent = (int)Tab::getIdFromClassName($parent);        $tab->module = $this->name;        return $tab->add();    }    public function uninstallTab($class_name)    {        $id_tab = (int)Tab::getIdFromClassName($class_name);        $tab = new Tab((int)$id_tab);        return $tab->delete();    }    public function install()    {        if (!parent::install()            || !$this->registerHook('displayAdminOrderLeft')        ) {            return false;        }        if (!$this->installTab('AdminParentOrders', 'AdminPackagingOrder', 'Emballages commandes')) {            return false;        }        if (!$this->installTab('AdminParentOrders', 'AdminCarrierOrder', 'Transporteur commandes')) {            return false;        }        return true;    }    public function hookDisplayAdminOrderLeft($params)    {        if (Tools::getIsset('validOrderFields')) {            // saveChoice            // save Carrier            Db::getInstance()->delete('carrier_order_combination', 'id_order = ' . $params['id_order']);            if (Tools::getIsset('carrier_order')) {                foreach (Tools::getValue('carrier_order') as $id_carrier => $value) {                    $datas = [                        'id_order' => $params['id_order'],                        'id_carrier_order' => $id_carrier                    ];                    Db::getInstance()->insert('carrier_order_combination', $datas);                }            }            // save packaging            Db::getInstance()->delete('packaging_order_combination', 'id_order = ' . $params['id_order']);            if (Tools::getIsset('packaging_order')) {                foreach (Tools::getValue('packaging_order') as $id_packaging_order => $value) {                    $datas = [                        'id_order' => $params['id_order'],                        'id_packaging_order' => $id_packaging_order                    ];                    Db::getInstance()->insert('packaging_order_combination', $datas);                }            }            // Update message            if (!empty(Tools::getValue('message_preparateur'))) {                // save                Db::getInstance()->update('orders',                    ['message_preparateur' => pSQL(Tools::getValue('message_preparateur'))],                    'id_order = ' . $params['id_order']);            }            // redirect after save            Tools::redirect($this->context->link->getAdminLink('AdminOrders', true, [],                ['vieworder' => 1, 'id_order' => $params['id_order']]));        }        // get VARS        $carriers_order = CarrierOrder::getCarriersOrder();        $packagings_order = PackagingOrder::getPackagingsOrder();        $sql = new DbQuery();        $sql->select('message_preparateur');        $sql->from('orders');        $sql->where('id_order = ' . $params['id_order']);        $message_preparateur = Db::getInstance()->getValue($sql);        $packagings_order_combination = PackagingOrder::getPackagingOrderByOrder($params['id_order']);        $carriers_order_combination = CarrierOrder::getCarrierOrderByOrder($params['id_order']);                $this->context->smarty->assign([            'packagings_order_combination' => $packagings_order_combination,            'carriers_order_combination' => $carriers_order_combination,            'message_preparateur' => $message_preparateur,            'carriers_order' => $carriers_order,            'packagings_order' => $packagings_order        ]);        return $this->display(__FILE__, 'views/templates/hook/admin-order-left.tpl');    }}